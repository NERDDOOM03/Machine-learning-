{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NERDDOOM03/Test/blob/main/Wine%20Testing%20C\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QYElLW4vQQZO"
      },
      "source": [
        "### Business Problem\n",
        "\n",
        " In a Wine manufacturing company there are wine tasters and wine makers who uses various chemical and phsical attributes and properties to make wine. They are trying to create an effcient way to make good quality wine so that can create an good impact in the market. \n",
        " Now as a data scientist I can help them by looking into previous datasets and analyzing it and create a Machine learning algorithm which can predict the quality of the Wine. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bEJAI_LqTZpf"
      },
      "source": [
        "### Dataset\n",
        "Here is the Dataset which i took for my research : Kaggle : https://www.kaggle.com/datasets/uciml/red-wine-quality-cortez-et-al-2009"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fYhJtGRMT-ew"
      },
      "source": [
        "\n",
        "Data Collection "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importing Libraries"
      ],
      "metadata": {
        "id": "wlQVJaUUakfR"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PqNKj2ulT0xN"
      },
      "outputs": [],
      "source": [
        "\n",
        "import pandas as pd # For data manupulation\n",
        "import numpy as np # For numeric computation\n",
        "import matplotlib.pyplot as plt # For visualization\n",
        "import seaborn as sns # For visualization\n",
        "from sklearn.metrics import accuracy_score # For coputing the accuracy \n",
        "from sklearn.preprocessing import LabelEncoder \n",
        "from imblearn.over_sampling import RandomOverSampler # For imbalance class in the dataset by oversampling the minority class \n",
        "from collections import Counter # For counting the occurance of items in the list\n",
        "import sklearn.model_selection # For splitting the dataset\n",
        "from sklearn.preprocessing import StandardScaler # To scale the varribles in the dataset\n",
        "from sklearn.linear_model import LogisticRegression # To predict the probability of the binary outcome\n",
        "from sklearn.metrics import recall_score, confusion_matrix, precision_score, f1_score, accuracy_score, classification_report # to evaluate the performnce of the ML models\n",
        "import seaborn as sns # To visulaize the data \n",
        "from sklearn.tree import DecisionTreeClassifier # To do the classification task for the ML models  \n",
        "from sklearn.svm import SVC # To be used for both linear and non linear classification task in ML\n",
        "from sklearn.naive_bayes import GaussianNB # Probabilistic algorith(naive_bayes) to make predictions\n",
        "from sklearn.model_selection import GridSearchCV # for hyperparameter tuning"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Uploading the dataset"
      ],
      "metadata": {
        "id": "1HnVwp4mFR8_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yTPpWXVAd-5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "outputId": "cbcea784-e271-4da7-f578-18e3e0787b54"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0            7.4              0.70         0.00             1.9      0.076   \n",
              "1            7.8              0.88         0.00             2.6      0.098   \n",
              "2            7.8              0.76         0.04             2.3      0.092   \n",
              "3           11.2              0.28         0.56             1.9      0.075   \n",
              "4            7.4              0.70         0.00             1.9      0.076   \n",
              "5            7.4              0.66         0.00             1.8      0.075   \n",
              "6            7.9              0.60         0.06             1.6      0.069   \n",
              "7            7.3              0.65         0.00             1.2      0.065   \n",
              "8            7.8              0.58         0.02             2.0      0.073   \n",
              "9            7.5              0.50         0.36             6.1      0.071   \n",
              "\n",
              "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
              "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
              "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
              "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
              "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
              "5                 13.0                  40.0   0.9978  3.51       0.56   \n",
              "6                 15.0                  59.0   0.9964  3.30       0.46   \n",
              "7                 15.0                  21.0   0.9946  3.39       0.47   \n",
              "8                  9.0                  18.0   0.9968  3.36       0.57   \n",
              "9                 17.0                 102.0   0.9978  3.35       0.80   \n",
              "\n",
              "   alcohol  quality  \n",
              "0      9.4        5  \n",
              "1      9.8        5  \n",
              "2      9.8        5  \n",
              "3      9.8        6  \n",
              "4      9.4        5  \n",
              "5      9.4        5  \n",
              "6      9.4        5  \n",
              "7     10.0        7  \n",
              "8      9.5        7  \n",
              "9     10.5        5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b26bb88-6f66-4e48-b31f-ff19bdd5fbf1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.9970</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.9980</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.66</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.8</td>\n",
              "      <td>0.075</td>\n",
              "      <td>13.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7.9</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.06</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.069</td>\n",
              "      <td>15.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>0.9964</td>\n",
              "      <td>3.30</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7.3</td>\n",
              "      <td>0.65</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.065</td>\n",
              "      <td>15.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>0.9946</td>\n",
              "      <td>3.39</td>\n",
              "      <td>0.47</td>\n",
              "      <td>10.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.02</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.073</td>\n",
              "      <td>9.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.36</td>\n",
              "      <td>0.57</td>\n",
              "      <td>9.5</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>7.5</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.36</td>\n",
              "      <td>6.1</td>\n",
              "      <td>0.071</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.35</td>\n",
              "      <td>0.80</td>\n",
              "      <td>10.5</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b26bb88-6f66-4e48-b31f-ff19bdd5fbf1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0b26bb88-6f66-4e48-b31f-ff19bdd5fbf1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0b26bb88-6f66-4e48-b31f-ff19bdd5fbf1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# to upload the dataset df.\n",
        "df = pd.read_csv(\"winequality-red.csv\") # Defining the dataframe as df\n",
        "df.head(10) # Checking the top 10 Rows "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploaring the dataset"
      ],
      "metadata": {
        "id": "gtyK5hcyFgqE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wXuDgh5ZemXD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98eb4438-9ce6-4acf-80b9-a1d61b8c64db"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 6, 7, 4, 8, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "# Here, checking the unique values\n",
        "df[\"quality\"].unique() # for checking I had to take the quality col from my data structure \n",
        "# the output I got is unique set of arrays"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I0hEKjGwetIr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d551bec4-03cf-4873-87b2-64edaae3836f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1599 entries, 0 to 1598\n",
            "Data columns (total 12 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   fixed acidity         1599 non-null   float64\n",
            " 1   volatile acidity      1599 non-null   float64\n",
            " 2   citric acid           1599 non-null   float64\n",
            " 3   residual sugar        1599 non-null   float64\n",
            " 4   chlorides             1599 non-null   float64\n",
            " 5   free sulfur dioxide   1599 non-null   float64\n",
            " 6   total sulfur dioxide  1599 non-null   float64\n",
            " 7   density               1599 non-null   float64\n",
            " 8   pH                    1599 non-null   float64\n",
            " 9   sulphates             1599 non-null   float64\n",
            " 10  alcohol               1599 non-null   float64\n",
            " 11  quality               1599 non-null   int64  \n",
            "dtypes: float64(11), int64(1)\n",
            "memory usage: 150.0 KB\n"
          ]
        }
      ],
      "source": [
        "# to check the entire dataframe \n",
        "# here we can see , all the cols have floating points except the last col which is integer \n",
        "df.info()\n",
        "# The output shows that there are 1599 entries, 0 -1598\n",
        "# total of 12 cols\n",
        "# 11 col float64 and 1 col as integer\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# to check the frequency of the values in fixed acidity col\n",
        "# so 7.2 appears to the highest with count of 67\n",
        "df['fixed acidity'].value_counts()\n",
        "# The output is in the decending order \n",
        "# the output 7.2 to  67 shows that there 67 instances where the Fixed acidity value is equal to 7.2\n",
        "# the output also shows that there are 96 unique values of acidity"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j3znOjpIYDv4",
        "outputId": "835550ce-3e33-4ce5-e4e6-414be61cb8f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7.2     67\n",
              "7.1     57\n",
              "7.8     53\n",
              "7.5     52\n",
              "7.0     50\n",
              "        ..\n",
              "13.5     1\n",
              "13.8     1\n",
              "13.4     1\n",
              "4.7      1\n",
              "5.5      1\n",
              "Name: fixed acidity, Length: 96, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the average of the fixed acidity\n",
        "fixed_acidity = df['fixed acidity'].mean()\n",
        "print(\"Average acidity Content:\",fixed_acidity)\n",
        "# The output shows that the average acidity count which is around 8.3\n",
        "# The value provides a general insight in the level of the acity in the data structure "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "38jK0q6ZRBMp",
        "outputId": "c414d996-36dc-4793-a8f4-e6e82741fb26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average acidity Content: 8.31963727329581\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# to check the frequency of the values in Volatile acidity col\n",
        "df['volatile acidity'].value_counts()\n",
        "# The output shows that there are 47 occurrences of the value 0.600 in the 'volatile acidity' column of the dataframe, \n",
        "# 46 occurrences of the value 0.500, 43 occurrences of the value 0.430, and so on."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OreuFgIHf6Yq",
        "outputId": "c75e0385-bb57-4937-f62d-8585da3416a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.600    47\n",
              "0.500    46\n",
              "0.430    43\n",
              "0.590    39\n",
              "0.360    38\n",
              "         ..\n",
              "1.035     1\n",
              "0.565     1\n",
              "1.130     1\n",
              "1.115     1\n",
              "1.090     1\n",
              "Name: volatile acidity, Length: 143, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# To check the volatile acidity in the col\n",
        "#  In this case, the average volatile acidity content is 0.5278205128205128, which is the numerical value\n",
        "volatile_acidity = df['volatile acidity'].mean()\n",
        "print(\"Average  Content:\",volatile_acidity)\n",
        "# It can also be used for comparison with other datasets or industry standards to evaluate the quality of the samples."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vHGVZPA8KBrQ",
        "outputId": "d75b5b54-8a44-45ca-be02-2415237cb818"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average  Content: 0.5278205128205128\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#To check the frequency of the values in the alcohol col\n",
        "# alcohol value with 9.5 appears to be 139 times which is the higest \n",
        "#  the value '9.4' appears 103 times\n",
        "# The values are listed in descending order, with the most frequently occurring value first.\n",
        "df['alcohol'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o-kK4u-cgLd9",
        "outputId": "3be318e0-4d8d-468c-a113-745bfcdc3a7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9.500000     139\n",
              "9.400000     103\n",
              "9.800000      78\n",
              "9.200000      72\n",
              "10.000000     67\n",
              "            ... \n",
              "9.950000       1\n",
              "9.233333       1\n",
              "9.250000       1\n",
              "9.050000       1\n",
              "10.750000      1\n",
              "Name: alcohol, Length: 65, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the average of the alcohol\n",
        "#  In this case, the average alcohol content is 10.422983114446529 , which is the numerical value\n",
        "average_alcohol = df['alcohol'].mean()\n",
        "print(\"Average Alcohol Content:\",average_alcohol)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WVjRxguWkbsD",
        "outputId": "3cfb7ff8-023c-40b6-9c94-b2405ce5a68d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average Alcohol Content: 10.422983114446529\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#To check the frequency of the values in the quality col\n",
        "# The code returns the unique value from the quality col\n",
        "#the value '5' appears 681 times in the 'quality' column of the DataFrame\n",
        "#the value '6' appears 638 times\n",
        "# The values are listed in ascending order, from lowest to highest quality score.\n",
        "\n",
        "df['quality'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1Cib7SimIjT",
        "outputId": "9ef169e0-46c4-4155-ea92-d494aaf85e56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5    681\n",
              "6    638\n",
              "7    199\n",
              "4     53\n",
              "8     18\n",
              "3     10\n",
              "Name: quality, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the average of the quality\n",
        " #  In this case, the average Quality is 5.6360225140712945 , which is the numerical value\n",
        "average_qual = df['quality'].mean()\n",
        "print(\"Average quality:\",average_qual)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jVqeSeZfR40l",
        "outputId": "6362ca69-9c32-4cfa-c21c-e9116e27302e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average quality: 5.6360225140712945\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#To check the frequency of the values in the ph col\n",
        "#returns the results in descending order\n",
        "# 89 unique values in total\n",
        "#the value 3.30 was found 57 times in the pH column, 3.36 was found 56 times\n",
        "df['pH'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wU9-18lVnCyJ",
        "outputId": "36e50b84-ff04-4839-f976-594f70674163"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.30    57\n",
              "3.36    56\n",
              "3.26    53\n",
              "3.38    48\n",
              "3.39    48\n",
              "        ..\n",
              "3.75     1\n",
              "2.74     1\n",
              "3.70     1\n",
              "3.85     1\n",
              "2.90     1\n",
              "Name: pH, Length: 89, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the average of the ph\n",
        "# In this case, the average PH  is 3.3111131957473416, which is the numerical value\n",
        "average_ph = df['pH'].mean()\n",
        "print(\"Average ph Content:\",average_ph)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BAqYU9LlSKa4",
        "outputId": "0d6a7869-aab9-4919-f396-921303bb6616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average ph Content: 3.3111131957473416\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## To check the quality of the dataset"
      ],
      "metadata": {
        "id": "o0keAvcH-lMj"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gPD-209Me67E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36c67a83-859f-48ec-c770-df407624a03a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fixed acidity           0\n",
              "volatile acidity        0\n",
              "citric acid             0\n",
              "residual sugar          0\n",
              "chlorides               0\n",
              "free sulfur dioxide     0\n",
              "total sulfur dioxide    0\n",
              "density                 0\n",
              "pH                      0\n",
              "sulphates               0\n",
              "alcohol                 0\n",
              "quality                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "#Here I am trying to check the NUll values in the dataframe\n",
        "# The code counts the number of missing values in each column of the dataframe df\n",
        "df.isnull().sum()\n",
        "# The output indicates that there are no missing values in any of the columns of the dataframe"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Here we can see that there is no null Values so, we can proceed with next ML steps "
      ],
      "metadata": {
        "id": "ZPZQPKikS7mA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dWP5yfL1fCFh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8156a35-5173-4461-b11f-1eedbfec6b6b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1599, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "# to check the dimension of the dataframe\n",
        "df.shape # to get the datastructer of the dataset\n",
        "#  df has 1599 rows and 12 columns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Here I am transforming the dataset of the quality col\n",
        "# . The transformation involves assigning a new value to each element of the \"quality\" column based on a threshold value\n",
        "#f the element's value is greater than 6.5, it is assigned the string \"good\"\n",
        "# Otherwise, it is assigned the string \"bad\n",
        "#The code achieves this transformation by iterating through each element in the \"quality\" column and applying an \"if-else\" condition\n",
        "quality = []  \n",
        "for q in df[\"quality\"]:\n",
        "    if q > 6.5:\n",
        "      quality.append(\"good\")\n",
        "    else:\n",
        "      quality.append(\"bad\")\n",
        "df[\"quality\"] = quality\n",
        "### the quality column can be used as a target variable and mapped to binary labels of \"good\" or \"bad\""
      ],
      "metadata": {
        "id": "7roiPzR83hpb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q398ray2fhgE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "outputId": "c1158acc-3dfd-4bd7-a9a3-c785add4d7e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0               7.4             0.700         0.00             1.9      0.076   \n",
              "1               7.8             0.880         0.00             2.6      0.098   \n",
              "2               7.8             0.760         0.04             2.3      0.092   \n",
              "3              11.2             0.280         0.56             1.9      0.075   \n",
              "4               7.4             0.700         0.00             1.9      0.076   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "1594            6.2             0.600         0.08             2.0      0.090   \n",
              "1595            5.9             0.550         0.10             2.2      0.062   \n",
              "1596            6.3             0.510         0.13             2.3      0.076   \n",
              "1597            5.9             0.645         0.12             2.0      0.075   \n",
              "1598            6.0             0.310         0.47             3.6      0.067   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
              "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
              "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
              "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "1594                 32.0                  44.0  0.99490  3.45       0.58   \n",
              "1595                 39.0                  51.0  0.99512  3.52       0.76   \n",
              "1596                 29.0                  40.0  0.99574  3.42       0.75   \n",
              "1597                 32.0                  44.0  0.99547  3.57       0.71   \n",
              "1598                 18.0                  42.0  0.99549  3.39       0.66   \n",
              "\n",
              "      alcohol quality  \n",
              "0         9.4     bad  \n",
              "1         9.8     bad  \n",
              "2         9.8     bad  \n",
              "3         9.8     bad  \n",
              "4         9.4     bad  \n",
              "...       ...     ...  \n",
              "1594     10.5     bad  \n",
              "1595     11.2     bad  \n",
              "1596     11.0     bad  \n",
              "1597     10.2     bad  \n",
              "1598     11.0     bad  \n",
              "\n",
              "[1599 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-40df1b03-0aca-4eb6-b3c2-f218355241d9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.880</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.99680</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.760</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.99700</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.280</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.99800</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1594</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.08</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.090</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.45</td>\n",
              "      <td>0.58</td>\n",
              "      <td>10.5</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1595</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.550</td>\n",
              "      <td>0.10</td>\n",
              "      <td>2.2</td>\n",
              "      <td>0.062</td>\n",
              "      <td>39.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>0.99512</td>\n",
              "      <td>3.52</td>\n",
              "      <td>0.76</td>\n",
              "      <td>11.2</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1596</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.510</td>\n",
              "      <td>0.13</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.076</td>\n",
              "      <td>29.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0.99574</td>\n",
              "      <td>3.42</td>\n",
              "      <td>0.75</td>\n",
              "      <td>11.0</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1597</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.645</td>\n",
              "      <td>0.12</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.075</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99547</td>\n",
              "      <td>3.57</td>\n",
              "      <td>0.71</td>\n",
              "      <td>10.2</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1598</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.310</td>\n",
              "      <td>0.47</td>\n",
              "      <td>3.6</td>\n",
              "      <td>0.067</td>\n",
              "      <td>18.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.99549</td>\n",
              "      <td>3.39</td>\n",
              "      <td>0.66</td>\n",
              "      <td>11.0</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1599 rows × 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40df1b03-0aca-4eb6-b3c2-f218355241d9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-40df1b03-0aca-4eb6-b3c2-f218355241d9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-40df1b03-0aca-4eb6-b3c2-f218355241d9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "df # to check the overall dataframe \n",
        "# Here the quality col has been modified\n",
        "# quality column has been reframed into good and bad "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Correalation analysis "
      ],
      "metadata": {
        "id": "CIC4dgEkAWxZ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_IGMHZJUiKDr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "bdb8e8cd-ba6d-4b0e-9dc1-79b5917de865"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      fixed acidity  volatile acidity  citric acid  \\\n",
              "fixed acidity              1.000000         -0.256131     0.671703   \n",
              "volatile acidity          -0.256131          1.000000    -0.552496   \n",
              "citric acid                0.671703         -0.552496     1.000000   \n",
              "residual sugar             0.114777          0.001918     0.143577   \n",
              "chlorides                  0.093705          0.061298     0.203823   \n",
              "free sulfur dioxide       -0.153794         -0.010504    -0.060978   \n",
              "total sulfur dioxide      -0.113181          0.076470     0.035533   \n",
              "density                    0.668047          0.022026     0.364947   \n",
              "pH                        -0.682978          0.234937    -0.541904   \n",
              "sulphates                  0.183006         -0.260987     0.312770   \n",
              "alcohol                   -0.061668         -0.202288     0.109903   \n",
              "\n",
              "                      residual sugar  chlorides  free sulfur dioxide  \\\n",
              "fixed acidity               0.114777   0.093705            -0.153794   \n",
              "volatile acidity            0.001918   0.061298            -0.010504   \n",
              "citric acid                 0.143577   0.203823            -0.060978   \n",
              "residual sugar              1.000000   0.055610             0.187049   \n",
              "chlorides                   0.055610   1.000000             0.005562   \n",
              "free sulfur dioxide         0.187049   0.005562             1.000000   \n",
              "total sulfur dioxide        0.203028   0.047400             0.667666   \n",
              "density                     0.355283   0.200632            -0.021946   \n",
              "pH                         -0.085652  -0.265026             0.070377   \n",
              "sulphates                   0.005527   0.371260             0.051658   \n",
              "alcohol                     0.042075  -0.221141            -0.069408   \n",
              "\n",
              "                      total sulfur dioxide   density        pH  sulphates  \\\n",
              "fixed acidity                    -0.113181  0.668047 -0.682978   0.183006   \n",
              "volatile acidity                  0.076470  0.022026  0.234937  -0.260987   \n",
              "citric acid                       0.035533  0.364947 -0.541904   0.312770   \n",
              "residual sugar                    0.203028  0.355283 -0.085652   0.005527   \n",
              "chlorides                         0.047400  0.200632 -0.265026   0.371260   \n",
              "free sulfur dioxide               0.667666 -0.021946  0.070377   0.051658   \n",
              "total sulfur dioxide              1.000000  0.071269 -0.066495   0.042947   \n",
              "density                           0.071269  1.000000 -0.341699   0.148506   \n",
              "pH                               -0.066495 -0.341699  1.000000  -0.196648   \n",
              "sulphates                         0.042947  0.148506 -0.196648   1.000000   \n",
              "alcohol                          -0.205654 -0.496180  0.205633   0.093595   \n",
              "\n",
              "                       alcohol  \n",
              "fixed acidity        -0.061668  \n",
              "volatile acidity     -0.202288  \n",
              "citric acid           0.109903  \n",
              "residual sugar        0.042075  \n",
              "chlorides            -0.221141  \n",
              "free sulfur dioxide  -0.069408  \n",
              "total sulfur dioxide -0.205654  \n",
              "density              -0.496180  \n",
              "pH                    0.205633  \n",
              "sulphates             0.093595  \n",
              "alcohol               1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-437591ba-cdbc-4a0f-8d7b-f0aa055e2f92\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>fixed acidity</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.256131</td>\n",
              "      <td>0.671703</td>\n",
              "      <td>0.114777</td>\n",
              "      <td>0.093705</td>\n",
              "      <td>-0.153794</td>\n",
              "      <td>-0.113181</td>\n",
              "      <td>0.668047</td>\n",
              "      <td>-0.682978</td>\n",
              "      <td>0.183006</td>\n",
              "      <td>-0.061668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>volatile acidity</th>\n",
              "      <td>-0.256131</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.552496</td>\n",
              "      <td>0.001918</td>\n",
              "      <td>0.061298</td>\n",
              "      <td>-0.010504</td>\n",
              "      <td>0.076470</td>\n",
              "      <td>0.022026</td>\n",
              "      <td>0.234937</td>\n",
              "      <td>-0.260987</td>\n",
              "      <td>-0.202288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>citric acid</th>\n",
              "      <td>0.671703</td>\n",
              "      <td>-0.552496</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.143577</td>\n",
              "      <td>0.203823</td>\n",
              "      <td>-0.060978</td>\n",
              "      <td>0.035533</td>\n",
              "      <td>0.364947</td>\n",
              "      <td>-0.541904</td>\n",
              "      <td>0.312770</td>\n",
              "      <td>0.109903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>residual sugar</th>\n",
              "      <td>0.114777</td>\n",
              "      <td>0.001918</td>\n",
              "      <td>0.143577</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.055610</td>\n",
              "      <td>0.187049</td>\n",
              "      <td>0.203028</td>\n",
              "      <td>0.355283</td>\n",
              "      <td>-0.085652</td>\n",
              "      <td>0.005527</td>\n",
              "      <td>0.042075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chlorides</th>\n",
              "      <td>0.093705</td>\n",
              "      <td>0.061298</td>\n",
              "      <td>0.203823</td>\n",
              "      <td>0.055610</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.005562</td>\n",
              "      <td>0.047400</td>\n",
              "      <td>0.200632</td>\n",
              "      <td>-0.265026</td>\n",
              "      <td>0.371260</td>\n",
              "      <td>-0.221141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <td>-0.153794</td>\n",
              "      <td>-0.010504</td>\n",
              "      <td>-0.060978</td>\n",
              "      <td>0.187049</td>\n",
              "      <td>0.005562</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.667666</td>\n",
              "      <td>-0.021946</td>\n",
              "      <td>0.070377</td>\n",
              "      <td>0.051658</td>\n",
              "      <td>-0.069408</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <td>-0.113181</td>\n",
              "      <td>0.076470</td>\n",
              "      <td>0.035533</td>\n",
              "      <td>0.203028</td>\n",
              "      <td>0.047400</td>\n",
              "      <td>0.667666</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.071269</td>\n",
              "      <td>-0.066495</td>\n",
              "      <td>0.042947</td>\n",
              "      <td>-0.205654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>density</th>\n",
              "      <td>0.668047</td>\n",
              "      <td>0.022026</td>\n",
              "      <td>0.364947</td>\n",
              "      <td>0.355283</td>\n",
              "      <td>0.200632</td>\n",
              "      <td>-0.021946</td>\n",
              "      <td>0.071269</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.341699</td>\n",
              "      <td>0.148506</td>\n",
              "      <td>-0.496180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pH</th>\n",
              "      <td>-0.682978</td>\n",
              "      <td>0.234937</td>\n",
              "      <td>-0.541904</td>\n",
              "      <td>-0.085652</td>\n",
              "      <td>-0.265026</td>\n",
              "      <td>0.070377</td>\n",
              "      <td>-0.066495</td>\n",
              "      <td>-0.341699</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.196648</td>\n",
              "      <td>0.205633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sulphates</th>\n",
              "      <td>0.183006</td>\n",
              "      <td>-0.260987</td>\n",
              "      <td>0.312770</td>\n",
              "      <td>0.005527</td>\n",
              "      <td>0.371260</td>\n",
              "      <td>0.051658</td>\n",
              "      <td>0.042947</td>\n",
              "      <td>0.148506</td>\n",
              "      <td>-0.196648</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.093595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alcohol</th>\n",
              "      <td>-0.061668</td>\n",
              "      <td>-0.202288</td>\n",
              "      <td>0.109903</td>\n",
              "      <td>0.042075</td>\n",
              "      <td>-0.221141</td>\n",
              "      <td>-0.069408</td>\n",
              "      <td>-0.205654</td>\n",
              "      <td>-0.496180</td>\n",
              "      <td>0.205633</td>\n",
              "      <td>0.093595</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-437591ba-cdbc-4a0f-8d7b-f0aa055e2f92')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-437591ba-cdbc-4a0f-8d7b-f0aa055e2f92 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-437591ba-cdbc-4a0f-8d7b-f0aa055e2f92');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "# To understand the correlation \n",
        "df.corr()\n",
        "#The correlation coefficient ranges between -1 and +1. A value of +1 indicates a perfect positive correlation\n",
        "#A value of -1 indicates a perfect negative correlation, which means that the two variables move in opposite directions\n",
        "# A value of 0 indicates no correlation\n",
        "#fixed acidity and citric acid have a strong positive correlation of 0.67\n",
        "# which means that as the fixed acidity increases, the citric acid also tends to increase\n",
        "#pH and fixed acidity have a strong negative correlation of -0.68\n",
        "# as fixed acidity increases, pH tends to decrease"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ihjnr8ZKiT2q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        },
        "outputId": "ad578e04-e00e-49c1-fe68-d355350f9c31"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.heatmap(data=df.corr(),annot=True) # for plotting the graph we need to code \n",
        "# Here we can see that there is no as such high correlated varriable "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "50IpUmRCiwhd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "b537d075-9445-4d03-d932-4fa55cbbf975"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='alcohol', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.histplot(data=df[\"alcohol\"])\n",
        "# plotting the graph for the alcohol col\n",
        "# x axis is Alcohol, and the y axis is the count"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jIaP1GOFjLbm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "c1893850-2c89-4ca2-e362-58964178538c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='density', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.histplot(data=df[\"density\"])\n",
        "# plotting the graph for the density Col"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BqNI3zL-jsPI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "4c58e0e4-10ee-4df1-df13-9bc13b66ee28"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='volatile acidity', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.histplot(data=df[\"volatile acidity\"])\n",
        "# plotting the graph for the acidity col"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "80lfuWuRj92P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "16db2530-e82d-4032-b5f9-f68d3ea4ef4e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.19368349811284427\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.boxplot(df[\"pH\"])\n",
        "print(df['pH'].skew())\n",
        "# To create the box plot of the PH col\n",
        "# the middle line is the median\n",
        "# a boxplot is created for the \"pH\" column of the dataframe \"df\" using the seaborn library\n",
        "# A boxplot is a way to visualize the distribution of a dataset and to identify outliers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S-3qR-KGkspt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "outputId": "92927f61-671d-4542-995a-755f6b970397"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-22-d8d69716b6e5>:1: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[df[\"quality\"]==\"Bad\"][\"alcohol\"])\n",
            "<ipython-input-22-d8d69716b6e5>:2: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[df[\"quality\"]==\"Good\"][\"alcohol\"])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='alcohol', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.distplot(df[df[\"quality\"]==\"Bad\"][\"alcohol\"]) # for plotting i have to use sns\n",
        "sns.distplot(df[df[\"quality\"]==\"Good\"][\"alcohol\"])\n",
        "# Here I am plotting th distribution of the wine from the quality col , with bad quality and good quality "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Preprocessing "
      ],
      "metadata": {
        "id": "p0QVZZFgA3tC"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nAzgs5YXoJz5"
      },
      "outputs": [],
      "source": [
        "# I am using the label encoder since I have to change the categorical varriable to integer \n",
        "# the \"LabelEncoder()\" class from the scikit-learn library is instantiated and assigned to the variable \"le\".\n",
        "#The purpose of using a label encoder in this context is to convert categorical variables, \n",
        "# such as the \"quality\" column which contains textual values like \"good\", \"average\", and \"poor\", into numerical values that can be used in machine learning algorithms. \n",
        "le=LabelEncoder()\n",
        "df[\"quality\"]=le.fit_transform(df[\"quality\"])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0_-sotpCoO02"
      },
      "outputs": [],
      "source": [
        "x=df.iloc[:,:-1].values # This code selects the col from the dataframe except the last col, iloc is used to slice the dataframe by the integer location\n",
        "y=df.iloc[:,-1].values  # This code only selects the last col of the df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lNKRYhsJpsXk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f5ebaf8-3b15-48ca-9862-83c6753f71af"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1382\n",
              "1     217\n",
              "Name: quality, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "# here I am checking the count of quality after the encoder\n",
        "# To check the counts of the  quality \n",
        "df[\"quality\"].value_counts()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=df[\"quality\"]) # Plotting the graph after the encoder "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "qcM5MwIZ2Vby",
        "outputId": "7c494f1c-3792-41b0-eef7-2f4a5b24fe30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='quality', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEGCAYAAACUzrmNAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVGUlEQVR4nO3dfbRddX3n8fdHIqAjEjS3DCsJDR3TB8ZOR3qLiNMOIx0E2hI6QxFWK5GhTWvRadXRYl1raLVdS1ed0uKyaCoU6KI8SHWILZbJ8FCm1VAvoMiDyh0EksjDrTzYlrEa+50/zi/lGG6yz03uOede7/u11ll379/+nb2/OzdZn/z23ud3UlVIkrQnzxt3AZKkhc+wkCR1MiwkSZ0MC0lSJ8NCktRp2bgLGIYVK1bUmjVrxl2GJC0qt99++99W1cRs274jw2LNmjVMTU2NuwxJWlSSPLS7bV6GkiR1MiwkSZ0MC0lSp6GFRZJLkjye5O5Ztr0tSSVZ0daT5MIk00nuSnJUX9/1Se5vr/XDqleStHvDHFlcCpy4a2OS1cAJwMN9zScBa9trA3BR6/sS4HzglcDRwPlJDhlizZKkWQwtLKrqVuCJWTZdALwD6J/BcB1wefVsAZYnOQx4LbC5qp6oqieBzcwSQJKk4RrpPYsk64DtVfW5XTatBLb2rW9rbbtrn23fG5JMJZmamZmZx6olSSMLiyQvBH4d+O/D2H9VbayqyaqanJiY9TMlkqS9NMqRxb8CjgA+l+RBYBVwR5J/CWwHVvf1XdXadtcuSRqhkYVFVX2+qr6rqtZU1Rp6l5SOqqpHgU3AWe2pqGOAp6vqEeAG4IQkh7Qb2ye0tqFaufpwkgz1tXL14cM+DUmaN0Ob7iPJlcBxwIok24Dzq+ri3XS/HjgZmAaeAc4GqKonkrwH+Ezr9+6qmu2m+bz6yratvO7DnxrqMa7+xWOHun9Jmk9DC4uqOrNj+5q+5QLO3U2/S4BL5rU4SdKc+AluSVInw0KS1MmwkCR1MiwkSZ0MC0lSJ8NCktTJsJAkdTIsJEmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVInw0KS1MmwkCR1MiwkSZ0MC0lSJ8NCktTJsJAkdTIsJEmdDAtJUqehhUWSS5I8nuTuvrbfSfKFJHcl+XiS5X3b3plkOskXk7y2r/3E1jad5Lxh1StJ2r1hjiwuBU7cpW0z8PKq+jfAl4B3AiQ5EjgD+NftPX+QZL8k+wEfBE4CjgTObH0lSSM0tLCoqluBJ3Zp+19VtaOtbgFWteV1wFVV9Y9V9WVgGji6vaar6oGq+gZwVesrSRqhcd6z+C/AJ9vySmBr37ZtrW137c+RZEOSqSRTMzMzQyhXkpausYRFkncBO4Ar5mufVbWxqiaranJiYmK+ditJApaN+oBJ3gD8JHB8VVVr3g6s7uu2qrWxh3ZJ0oiMdGSR5ETgHcApVfVM36ZNwBlJDkhyBLAW+BvgM8DaJEck2Z/eTfBNo6xZkjTEkUWSK4HjgBVJtgHn03v66QBgcxKALVX1S1V1T5JrgHvpXZ46t6q+1fbzJuAGYD/gkqq6Z1g1S5JmN7SwqKozZ2m+eA/9fxv47Vnarweun8fSJElz5Ce4JUmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVInw0KS1MmwkCR1MiwkSZ0MC0lSJ8NCktTJsJAkdTIsJEmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVInw0KS1MmwkCR1MiwkSZ2GFhZJLknyeJK7+9pekmRzkvvbz0Nae5JcmGQ6yV1Jjup7z/rW//4k64dVryRp94Y5srgUOHGXtvOAG6tqLXBjWwc4CVjbXhuAi6AXLsD5wCuBo4HzdwaMJGl0hhYWVXUr8MQuzeuAy9ryZcCpfe2XV88WYHmSw4DXApur6omqehLYzHMDSJI0ZKO+Z3FoVT3Slh8FDm3LK4Gtff22tbbdtT9Hkg1JppJMzczMzG/VkrTEje0Gd1UVUPO4v41VNVlVkxMTE/O1W0kSow+Lx9rlJdrPx1v7dmB1X79VrW137ZKkERp1WGwCdj7RtB64rq/9rPZU1DHA0+1y1Q3ACUkOaTe2T2htkqQRWjasHSe5EjgOWJFkG72nmt4LXJPkHOAh4PTW/XrgZGAaeAY4G6CqnkjyHuAzrd+7q2rXm+aSpCEbWlhU1Zm72XT8LH0LOHc3+7kEuGQeS5MkzZGf4JYkdTIsJEmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVInw0KS1MmwkCR1MiwkSZ0MC0lSJ8NCktTJsJAkdTIsJEmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVInw0KS1MmwkCR1GktYJHlLknuS3J3kyiQHJjkiyW1JppNcnWT/1veAtj7dtq8ZR82StJSNPCySrAT+KzBZVS8H9gPOAN4HXFBVLwOeBM5pbzkHeLK1X9D6SZJGaKCwSPLqQdrmYBnwgiTLgBcCjwCvAa5t2y8DTm3L69o6bfvxSbIPx5YkzdGgI4sPDNjWqaq2A+8HHqYXEk8DtwNPVdWO1m0bsLItrwS2tvfuaP1fuut+k2xIMpVkamZmZm9KkyTtxrI9bUzyKuBYYCLJW/s2vZje5aM5S3IIvdHCEcBTwEeBE/dmX/2qaiOwEWBycrL2dX+SpGd1jSz2B15EL1QO6nt9DThtL4/548CXq2qmqr4JfAx4NbC8XZYCWAVsb8vbgdUAbfvBwFf38tiSpL2wx5FFVf0l8JdJLq2qh+bpmA8DxyR5IfD/gOOBKeBmegF0FbAeuK7139TWP92231RVjhwkaYT2GBZ9DkiyEVjT/56qes1cD1hVtyW5FrgD2AHcSe/y0Z8DVyX5rdZ2cXvLxcAfJ5kGnqD35JQkaYQGDYuPAh8CPgJ8a18PWlXnA+fv0vwAcPQsfb8O/My+HlOStPcGDYsdVXXRUCuRJC1Ygz46+4kkv5zksCQv2fkaamWSpAVj0JHF+vbz7X1tBXzP/JYjSVqIBgqLqjpi2IVIkhaugcIiyVmztVfV5fNbjiRpIRr0MtSP9C0fSO+zEXcAhoUkLQGDXoZ6c/96kuX0PjwnSVoC9naK8n+gN7eTJGkJGPSexSfoPf0EvQkEfwC4ZlhFSZIWlkHvWby/b3kH8FBVbRtCPZKkBWigy1BtQsEv0Jtx9hDgG8MsSpK0sAz6TXmnA39Db46m04HbkuztFOWSpEVm0MtQ7wJ+pKoeB0gyAfxvnv0aVEnSd7BBn4Z63s6gaL46h/dKkha5QUcWf5HkBuDKtv464PrhlCRJWmi6voP7ZcChVfX2JP8J+Hdt06eBK4ZdnCRpYegaWfwe8E6AqvoYve/LJskPtm0/NcTaJEkLRNd9h0Or6vO7Nra2NUOpSJK04HSFxfI9bHvBPNYhSVrAusJiKskv7NqY5OeB24dTkiRpoem6Z/GrwMeT/CzPhsMksD/w00OsS5K0gOxxZFFVj1XVscBvAg+2129W1auq6tG9PWiS5UmuTfKFJPcleVX7Xu/NSe5vPw9pfZPkwiTTSe5KctTeHleStHcGnRvq5qr6QHvdNA/H/X3gL6rq+4EfAu4DzgNurKq1wI1tHeAkYG17bQAumofjS5LmYOSfwk5yMPBjwMUAVfWNqnoKWAdc1rpdBpzaltcBl1fPFmB5ksNGWrQkLXHjmLLjCGAG+KMkdyb5SJJ/Qe8x3Udan0eBQ9vySmBr3/u3tbZvk2RDkqkkUzMzM0MsX5KWnnGExTLgKOCiqnoFvW/dO6+/Q1UVz37Z0kCqamNVTVbV5MTExLwVK0kaT1hsA7ZV1W1t/Vp64fHYzstL7efOiQu3A6v73r+qtUmSRmTkYdGeotqa5Pta0/HAvcAmYH1rWw9c15Y3AWe1p6KOAZ7uu1wlSRqBQWednW9vBq5Isj/wAHA2veC6Jsk5wEP0vmQJerPbngxMA8+0vpKkERpLWFTVZ+l9uG9Xx8/St4Bzh12TJGn3/AIjSVInw0KS1MmwkCR1MiwkSZ0MC0lSJ8NCktTJsJAkdTIsJEmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVInw0KS1MmwkCR1MiwkSZ0MC0lSJ8NCktTJsJAkdTIsJEmdDAtJUqexhUWS/ZLcmeTP2voRSW5LMp3k6iT7t/YD2vp0275mXDVL0lI1zpHFrwD39a2/D7igql4GPAmc09rPAZ5s7Re0fpKkERpLWCRZBfwE8JG2HuA1wLWty2XAqW15XVunbT++9Zckjci4Rha/B7wD+Ke2/lLgqara0da3ASvb8kpgK0Db/nTr/22SbEgylWRqZmZmiKVL0tIz8rBI8pPA41V1+3zut6o2VtVkVU1OTEzM564laclbNoZjvho4JcnJwIHAi4HfB5YnWdZGD6uA7a3/dmA1sC3JMuBg4KujL1uSlq6Rjyyq6p1Vtaqq1gBnADdV1c8CNwOntW7rgeva8qa2Ttt+U1XVCEuWpCVvIX3O4teAtyaZpndP4uLWfjHw0tb+VuC8MdUnSUvWOC5D/bOqugW4pS0/ABw9S5+vAz8z0sIkSd9mIY0sJEkLlGEhSepkWEiSOhkWkqROhoUkqZNhIUnqZFhIkjoZFpKkToaFJKmTYSFJ6mRYSJI6GRaSpE6GhSSpk2EhSepkWEiSOhkWkqROhoUkqZNhIUnqZFhIkjoZFpKkToaFJKnTyMMiyeokNye5N8k9SX6ltb8kyeYk97efh7T2JLkwyXSSu5IcNeqaJWk+rFx9OEmG+lq5+vCh1L5sKHvdsx3A26rqjiQHAbcn2Qy8Abixqt6b5DzgPODXgJOAte31SuCi9lOSFpWvbNvK6z78qaEe4+pfPHYo+x35yKKqHqmqO9ry3wH3ASuBdcBlrdtlwKlteR1wefVsAZYnOWy0VUvS0jbWexZJ1gCvAG4DDq2qR9qmR4FD2/JKYGvf27a1tl33tSHJVJKpmZmZ4RUtSUvQ2MIiyYuAPwV+taq+1r+tqgqoueyvqjZW1WRVTU5MTMxjpZKksYRFkufTC4orqupjrfmxnZeX2s/HW/t2YHXf21e1NknSiIzjaagAFwP3VdXv9m3aBKxvy+uB6/raz2pPRR0DPN13uUqSNALjeBrq1cDrgc8n+Wxr+3XgvcA1Sc4BHgJOb9uuB04GpoFngLNHWq0kafRhUVV/BWQ3m4+fpX8B5w61KEnSHvkJbklSJ8NCktTJsJAkdTIsJEmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVInw0KS1MmwkCR1MiwkSZ0MC0lSJ8NCktTJsJAkdTIsJEmdDAtJUifDQpLUybCQJHUyLCRJnQwLSVKnRRMWSU5M8sUk00nOG3c9krSULIqwSLIf8EHgJOBI4MwkR463KklaOhZFWABHA9NV9UBVfQO4Clg35pokaclIVY27hk5JTgNOrKqfb+uvB15ZVW/q67MB2NBWvw/44j4ccgXwt/vw/sVoqZ3zUjtf8JyXin055++uqonZNizb+3oWlqraCGycj30lmaqqyfnY12Kx1M55qZ0veM5LxbDOebFchtoOrO5bX9XaJEkjsFjC4jPA2iRHJNkfOAPYNOaaJGnJWBSXoapqR5I3ATcA+wGXVNU9QzzkvFzOWmSW2jkvtfMFz3mpGMo5L4ob3JKk8Vosl6EkSWNkWEiSOi3ZsOiaPiTJAUmubttvS7JmDGXOqwHO+a1J7k1yV5Ibk3z3OOqcT4NOE5PkPyepJIv+MctBzjnJ6e13fU+SPxl1jfNtgL/bhye5Ocmd7e/3yeOoc74kuSTJ40nu3s32JLmw/XncleSofT5oVS25F72b5P8X+B5gf+BzwJG79Pll4ENt+Qzg6nHXPYJz/g/AC9vyG5fCObd+BwG3AluAyXHXPYLf81rgTuCQtv5d4657BOe8EXhjWz4SeHDcde/jOf8YcBRw9262nwx8EghwDHDbvh5zqY4sBpk+ZB1wWVu+Fjg+SUZY43zrPOequrmqnmmrW+h9nmUxG3SamPcA7wO+PsrihmSQc/4F4INV9SRAVT0+4hrn2yDnXMCL2/LBwFdGWN+8q6pbgSf20GUdcHn1bAGWJzlsX465VMNiJbC1b31ba5u1T1XtAJ4GXjqS6oZjkHPudw69/5ksZp3n3Ibnq6vqz0dZ2BAN8nv+XuB7k/x1ki1JThxZdcMxyDn/BvBzSbYB1wNvHk1pYzPXf++dFsXnLDRaSX4OmAT+/bhrGaYkzwN+F3jDmEsZtWX0LkUdR2/0eGuSH6yqp8ZZ1JCdCVxaVf8jyauAP07y8qr6p3EXtlgs1ZHFINOH/HOfJMvoDV2/OpLqhmOgKVOS/DjwLuCUqvrHEdU2LF3nfBDwcuCWJA/Su7a7aZHf5B7k97wN2FRV36yqLwNfohcei9Ug53wOcA1AVX0aOJDehHvfqeZ9iqSlGhaDTB+yCVjflk8Dbqp252iR6jznJK8APkwvKBb7dWzoOOeqerqqVlTVmqpaQ+8+zSlVNTWecufFIH+3/ye9UQVJVtC7LPXACGucb4Oc88PA8QBJfoBeWMyMtMrR2gSc1Z6KOgZ4uqoe2ZcdLsnLULWb6UOSvBuYqqpNwMX0hqrT9G4knTG+ivfdgOf8O8CLgI+2e/kPV9UpYyt6Hw14zt9RBjznG4ATktwLfAt4e1Ut2lHzgOf8NuAPk7yF3s3uNyzm//wluZJe4K9o92HOB54PUFUfondf5mRgGngGOHufj7mI/7wkSSOyVC9DSZLmwLCQJHUyLCRJnQwLSVInw0KS1MmwkMYgyZqdM4YmmUxyYVs+Lsmx461Oeq4l+TkLaSFpHwLc+UHA44C/Bz41toKkWTiykOYoybuSfCnJXyW5Msl/S3LLzmlCkqxo04fsHEH8nyR3tNdzRg1tNPFn7TtTfgl4S5LPJvnRJF9O8vzW78X969IoObKQ5iDJD9P7NP+/pffv5w7g9j285XHgP1bV15OsBa6kN0njc1TVg0k+BPx9Vb2/He8W4CfoTdFxBvCxqvrmvJyMNAeOLKS5+VHg41X1TFV9jefOQbSr59ObZuLzwEfpffHOXHyEZ6dqOBv4ozm+X5oXjiyk+bGDZ//zdWBf+1uAx4Afatvn9AVLVfXX7VLWccB+VTXr12hKw+bIQpqbW4FTk7wgyUHAT7X2B4Efbsun9fU/GHikfW/C6+lNdLcnf0dv6vR+lwN/gqMKjZFhIc1BVd0BXE3ve54/SW96bID3A29Mciff/j0JfwCsT/I54PuBf+g4xCeAn955g7u1XQEcQu9+hzQWzjor7YMkv0HfDekhHeM0YF1VvX5Yx5C6eM9CWsCSfAA4id53E0hj48hCktTJexaSpE6GhSSpk2EhSepkWEiSOhkWkqRO/x84hxNuTURGlgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sf1tffbj3Imn"
      },
      "outputs": [],
      "source": [
        "# balance the class distribution of the target variable y \n",
        "# the fit_resample method of the RandomOverSampler class is used to resample the input features x and target variable y\n",
        "# This means that the minority class (i.e., the class with fewer samples) is oversampled by randomly replicating some of its samples\n",
        "#  Until it has the same number of samples as the majority class.\n",
        "r_o_s = RandomOverSampler()\n",
        "x_res, y_res = r_o_s.fit_resample(x, y)\n",
        "x_std,y_std=r_o_s.fit_resample(x,y)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6alOK4dtAc_7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "abea1586-d3ee-4644-c994-0de168eda5e1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Counter({0: 1382, 1: 1382})"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "# The Counter function is used to count the number of occurrences of each unique value in the y_res array\n",
        "#  it is used to verify that the oversampling has successfully balanced the classes\n",
        "# output shows an equal number of occurrences for each unique value, then the dataset is balanced.\n",
        "Counter(y_res)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature Engineering"
      ],
      "metadata": {
        "id": "YpEDB_UVBVXj"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ejbtQRuM7Jui",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "703a57c0-c7fe-4901-c2ff-c28d4f5febf3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train size (2073, 11)\n",
            "x_test size (691, 11)\n",
            "y_train size (2073,)\n",
            "y_test size (691,)\n"
          ]
        }
      ],
      "source": [
        "# Seperating the Features and the Target Varriable \n",
        "# This codes splits the data into train and test\n",
        "x_train,x_test,y_train,y_test=sklearn.model_selection.train_test_split(x_std,y_std)\n",
        "print(\"x_train size\", x_train.shape)\n",
        "print(\"x_test size\", x_test.shape)\n",
        "print(\"y_train size\", y_train.shape)\n",
        "print(\"y_test size\", y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CBSNYDaSFvbV"
      },
      "outputs": [],
      "source": [
        "# Building a standardized model which can scale the dataset\n",
        "# The fit_transform() method of StandardScaler is used to fit the scaler on the training data\n",
        "#transform both the training and testing data using the same scaling parameters.\n",
        "std=StandardScaler()\n",
        "x_data_train=std.fit_transform(x_train)\n",
        "x_data_test=std.fit_transform(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jS-prwAkF4MC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "2b465b27-91a8-4ffa-a9bf-c195d296ad2c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "# Logistic Model \n",
        "# Applying Logistic Model\n",
        "log=LogisticRegression()\n",
        "log.fit(x_data_train,y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8t5ooXQiGB6v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f76aa57e-15dc-4656-8902-27a7c01e32f2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "83.3574529667149"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "# To check the accuracy \n",
        "# The code calculates the accuracy of the model\n",
        "y_pred_log = log.predict(x_data_test)\n",
        "# The resulting accuracy score is multiplied by 100 and stored in the variable acc.\n",
        "acc = accuracy_score(y_pred_log,y_test)*100\n",
        "acc "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZmoJdT4AIAxf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "aa0ef2db-c49d-49a1-a39e-a884869a38cc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'No'), Text(0, 1.5, 'Yes')]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Logistic regression confusion matrix\n",
        "# This code generates a confusion matrix plot for the Loistic model predictions on the test set. From the LOISTIC confusion matrix, we can see that:\n",
        "#TN (True Negatives) - 274 FP (False Positives) - 53 FN (False Negatives) - 62 TP (True Negatives) - 302\n",
        "\n",
        "TN (True Negatives) - 1078 FP (False Positives) - 224 FN (False Negatives) - 197 TP (True Negatives) - 259\n",
        "cm_lr = confusion_matrix(y_pred_log, y_test)\n",
        "f, ax= plt.subplots(1,1,figsize=(5,3))\n",
        "sns.heatmap(cm_lr, annot=True, fmt='g', ax=ax)\n",
        "\n",
        "ax.set_xlabel('Predicted labels'); ax.set_ylabel('True labels') ; ax.set_title('Confusion Matrix')\n",
        "ax.xaxis.set_ticklabels(['No', 'Yes']) ; ax.yaxis.set_ticklabels(['No', 'Yes'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I9TSU05lIlmo"
      },
      "outputs": [],
      "source": [
        "# KNN Classifier\n",
        "# Applying KNN Model\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "knn = KNeighborsClassifier(n_neighbors = 1)\n",
        "knn.fit(x_data_train,y_train)\n",
        "y_pred_knn = knn.predict(x_data_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1M3GqNgpUgEh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3c576c5-456d-49b2-a59c-dc33fbe01871"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "95.9479015918958"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "# KNN accuracy\n",
        "# To check the accuracy \n",
        "# The code calculates the accuracy of the model\n",
        "acc = accuracy_score(y_pred_knn,y_test)*100 # # The resulting accuracy score is multiplied by 100 and stored in the variable acc.\n",
        "acc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5818sCMaXqy2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "faaab43a-94d1-4868-c76a-a687366b3283"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'No'), Text(0, 1.5, 'Yes')]"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# KNN Cofusion Matrix\n",
        "#   KNN confusion matrix\n",
        "# This code generates a confusion matrix plot for the KNN  model predictions on the test set. From the KNN confusion matrix, we can see that:\n",
        "#TN (True Negatives) - 312 FP (False Positives) - 4 FN (False Negatives) - 24 TP (True Negatives) - 351\n",
        "cm_knn = confusion_matrix(y_pred_knn, y_test)\n",
        "f, ax= plt.subplots(1,1,figsize=(5,3))\n",
        "sns.heatmap(cm_knn, annot=True, fmt='g', ax=ax)\n",
        "\n",
        "ax.set_xlabel('Predicted labels'); ax.set_ylabel('True labels') ; ax.set_title('Confusion Matrix')\n",
        "ax.xaxis.set_ticklabels(['No', 'Yes']) ; ax.yaxis.set_ticklabels(['No', 'Yes'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GhjMfc0nY-P3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "b105863e-f47c-45a1-914f-ec493796a45c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "### KNN Range Plot\n",
        "score_array = [] # This initializes an empty list to store the accuracy scores of the KNN model for different values of K\n",
        "for each in range(1,50): # This sets up a loop that will iterate through the values of K from 1 to 49 (50 is not included)\n",
        "    knn_loop = KNeighborsClassifier(n_neighbors = each) #set K neighbor as 50\n",
        "    knn_loop.fit(x_data_train,y_train) # This trains the KNN model on the training data x_data_train\n",
        "    score_array.append(knn_loop.score(x_data_test,y_test)) # This calculates the accuracy score of the trained model on the test data x_data_test\n",
        "    # and the corresponding labels y_test, and appends it to the score_array list.\n",
        "    \n",
        "plt.plot(range(1,50),score_array)\n",
        "plt.xlabel(\"Range\") # This sets the label of the x-axis to \"Range\"\n",
        "plt.ylabel(\"Score\") # This sets the label of the y-axis to \"Score\".\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3T3UlZHAbE2L",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6dc71594-add2-4396-e77d-519201db331e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          No       0.99      0.93      0.96       336\n",
            "         Yes       0.94      0.99      0.96       355\n",
            "\n",
            "    accuracy                           0.96       691\n",
            "   macro avg       0.96      0.96      0.96       691\n",
            "weighted avg       0.96      0.96      0.96       691\n",
            "\n"
          ]
        }
      ],
      "source": [
        "### KNN Classification Report\n",
        "print(classification_report(y_test, y_pred_knn, target_names=['No', 'Yes']))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VGx95yLhcara"
      },
      "outputs": [],
      "source": [
        "### Decison Tree\n",
        "dt = DecisionTreeClassifier()\n",
        "dt.fit(x_data_train,y_train)\n",
        "y_pred_dt = dt.predict(x_data_test)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "92F0BpUIiPem",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "152e9d56-5636-41fd-8fbb-2ce48537f00e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "83.64688856729377"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "# DecisionTree  Accuracy\n",
        "acc = accuracy_score(y_pred_dt,y_test)*100\n",
        "acc\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hxEuVB_Yipqm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "e42bbab8-fa38-43d9-baf5-a59d44afc0cc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'No'), Text(0, 1.5, 'Yes')]"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "### Decision Tree\n",
        "cm_dt = confusion_matrix(y_pred_dt, y_test)\n",
        "f, ax= plt.subplots(1,1,figsize=(5,3))\n",
        "sns.heatmap(cm_dt, annot=True, fmt='g', ax=ax)\n",
        "\n",
        "ax.set_xlabel('Predicted labels'); ax.set_ylabel('True labels') ; ax.set_title('Confusion Matrix')\n",
        "ax.xaxis.set_ticklabels(['No', 'Yes']) ; ax.yaxis.set_ticklabels(['No', 'Yes'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3MWF40WcoGx6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2a097d0-70af-4f38-96f4-ca43de5bcb68"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          No       0.78      0.93      0.85       336\n",
            "         Yes       0.92      0.74      0.82       355\n",
            "\n",
            "    accuracy                           0.84       691\n",
            "   macro avg       0.85      0.84      0.84       691\n",
            "weighted avg       0.85      0.84      0.84       691\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Decision tree Classification Report \n",
        "print(classification_report(y_test,y_pred_dt,target_names= ['No','Yes']))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uD5GwGZMuxXo"
      },
      "outputs": [],
      "source": [
        "### SVM Classification\n",
        "svc = SVC(random_state = 10)\n",
        "svc.fit(x_data_train,y_train)\n",
        "y_pred_svc = svc.predict(x_data_test)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FTCSlRkyzvdu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e73c38b5-2670-408b-b698-4cb11f73b0b6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "87.12011577424023"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ],
      "source": [
        "acc = accuracy_score(y_pred_svc,y_test)*100\n",
        "acc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zxVdCTMsnSny",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "c3d0b539-05cd-4469-f09f-3d637420cbb5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'No'), Text(0, 1.5, 'Yes')]"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# SVM confusion matrix\n",
        "cm_svm = confusion_matrix(y_pred_svc, y_test)\n",
        "f, ax= plt.subplots(1,1,figsize=(5,3))\n",
        "sns.heatmap(cm_svm, annot=True, fmt='g', ax=ax)\n",
        "\n",
        "ax.set_xlabel('Predicted labels'); ax.set_ylabel('True labels') ; ax.set_title('Confusion Matrix')\n",
        "ax.xaxis.set_ticklabels(['No', 'Yes']) ; ax.yaxis.set_ticklabels(['No', 'Yes'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EsnQc8i12DrH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d05c29b8-af2c-408b-dcb6-a458c4a1de69"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          No       0.90      0.82      0.86       336\n",
            "         Yes       0.85      0.92      0.88       355\n",
            "\n",
            "    accuracy                           0.87       691\n",
            "   macro avg       0.87      0.87      0.87       691\n",
            "weighted avg       0.87      0.87      0.87       691\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# SVM Confusion Matrix Report\n",
        "print(classification_report(y_test,y_pred_svc,target_names= ['No','Yes']))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0sXGc72r3Pq9"
      },
      "outputs": [],
      "source": [
        "# Naive Bayes Classification \n",
        "n = GaussianNB()\n",
        "n.fit(x_data_train,y_train)\n",
        "y_pred_n = n.predict(x_data_test)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "luzyNqur5Yf8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0fe0c520-3320-451a-f98e-d0728721f4bc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "80.17366136034732"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "acc = accuracy_score(y_pred_n,y_test)*100\n",
        "acc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l4IpQqpQ6Ak1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "7553aa1d-7946-4f17-d0e4-d37c24615bf3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'No'), Text(0, 1.5, 'Yes')]"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Naive Bayes confusion matrix\n",
        "cm_n = confusion_matrix(y_pred_n, y_test)\n",
        "f, ax= plt.subplots(1,1,figsize=(5,3))\n",
        "sns.heatmap(cm_n, annot=True, fmt='g', ax=ax)\n",
        "\n",
        "ax.set_xlabel('Predicted labels'); ax.set_ylabel('True labels') ; ax.set_title('Confusion Matrix')\n",
        "ax.xaxis.set_ticklabels(['No', 'Yes']) ; ax.yaxis.set_ticklabels(['No', 'Yes'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UWXckRyN6UZq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8fcc918-6262-4df6-b11d-cd80d47bb4aa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          No       0.82      0.76      0.79       336\n",
            "         Yes       0.79      0.84      0.81       355\n",
            "\n",
            "    accuracy                           0.80       691\n",
            "   macro avg       0.80      0.80      0.80       691\n",
            "weighted avg       0.80      0.80      0.80       691\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Naive Bayes Classification Report \n",
        "print(classification_report(y_test,y_pred_n,target_names= ['No','Yes']))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pWuRQ0DLAc99"
      },
      "source": [
        "## Here we can see that the KNN model is giving us better accuracy score , So I am going to fine tune the KNN Model\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "id": "TSh3vmaRDaTC",
        "outputId": "99d8cc8c-590d-487c-ce96-c07ac81145f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 90 candidates, totalling 450 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n",
              "             param_grid={'n_neighbors': array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]),\n",
              "                         'p': [1, 2, 3], 'weights': ['uniform', 'distance']},\n",
              "             return_train_score=True, verbose=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n",
              "             param_grid={&#x27;n_neighbors&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]),\n",
              "                         &#x27;p&#x27;: [1, 2, 3], &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n",
              "             return_train_score=True, verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n",
              "             param_grid={&#x27;n_neighbors&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]),\n",
              "                         &#x27;p&#x27;: [1, 2, 3], &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n",
              "             return_train_score=True, verbose=True)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "# Fine Tuning the KNN Model\n",
        "# he param_grid dictionary defines a range of hyperparameters to be tested, including the number of neighbors (n_neighbors)\n",
        "#  The p parameter is set to take on the values of 1, 2, and 3.\n",
        "# The np.arange() function generates an array of odd integers from 1 to 29 inclusive, which will be used as values for n_neighbors\n",
        "param_grid = {'n_neighbors': np.arange(1, 30, 2),\n",
        "              'weights': ['uniform', 'distance'],\n",
        "              'p': [1, 2, 3]}\n",
        "\n",
        "knn_model = KNeighborsClassifier()\n",
        "#  GridSearchCV class is used to perform a cross-validation grid search\n",
        "#The cv parameter is set to 5, which means that a 5-fold cross-validation will be performed\n",
        "#The verbose parameter is set to True, which means that progress messages will be printed to the console during the search\n",
        "# The n_jobs parameter is set to -1, which means that the search will use all available CPU cores to perform the computation in parallel.\n",
        "# The return_train_score parameter is set to True, which means that the training scores for each combination of hyperparameters will also be returned in the result.\n",
        "grid_cv = GridSearchCV(knn_model, param_grid=param_grid, cv=5, verbose=True, n_jobs=-1, return_train_score=True)\n",
        "grid_cv.fit(x_data_train, y_train)   \n",
        "# he fit() method of the GridSearchCV object is called with the training data (x_data_train and y_train) to perform the grid search "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qWtHEqhuEctW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "8c05848f-7dec-41a7-c5b9-d9aea9738640"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "source": [
        "best_estimator = grid_cv.best_estimator_\n",
        "best_estimator"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_knn = best_estimator.predict(x_data_test)\n",
        "# To compute accuracy\n",
        "acc = accuracy_score(y_pred_knn,y_test)*100\n",
        "print(\"Accuracy:\",acc*100)\n",
        "# To Commpute the F1 score \n",
        "f1 = f1_score(y_test, y_pred_knn)\n",
        "print(\"f1_score:\",f1*100)\n",
        "# To Compute the Precission \n",
        "precision = precision_score(y_test, y_pred_knn)\n",
        "print(\"Precision:\", precision*100)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-BPUzYSNNs0q",
        "outputId": "c91ba137-ce63-49de-ab3c-09aaeb60f35b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 9594.79015918958\n",
            "f1_score: 96.16438356164385\n",
            "Precision: 93.60000000000001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def print_scores(headline, y_true, y_pred): # Python function named print_scores\n",
        "    print(headline)\n",
        "    acc_score = accuracy_score(y_true, y_pred) \n",
        "    print(\"accuracy: \",acc_score)\n",
        "    pre_score = precision_score(y_true, y_pred)\n",
        "    print(\"precision: \",pre_score)\n",
        "    rec_score = recall_score(y_true, y_pred)                            \n",
        "    print(\"recall: \",rec_score)\n",
        "    f_score = f1_score(y_true, y_pred, average='weighted')\n",
        "    print(\"f1_score: \",f_score)\n",
        "    # The function then calculates and prints four classification performance metrics: accuracy, precision, recall, and F1 score\n",
        "    # accuracy_score computes the accuracy of the classifier\n",
        "    #precision_score computes the precision of the classifier\n",
        "    # recall_score computes the recall of the classifier\n",
        "    # f1_score computes the F1 score of the classifier"
      ],
      "metadata": {
        "id": "GjoZStMiSdah"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print_scores(\"KNN;\",y_test, y_pred_knn)\n",
        "print_scores(\"SVC;\",y_test, y_pred_svc)\n",
        "print_scores(\"Naive Bayes;\",y_test, y_pred_n)\n",
        "print_scores(\"Decision Tree;\",y_test, y_pred_dt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0EEJfLn5UR9i",
        "outputId": "705bfd70-bc79-4bb0-f00d-c7b89b2c896c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KNN;\n",
            "accuracy:  0.959479015918958\n",
            "precision:  0.936\n",
            "recall:  0.9887323943661972\n",
            "f1_score:  0.9594126104067654\n",
            "SVC;\n",
            "accuracy:  0.8712011577424024\n",
            "precision:  0.8463541666666666\n",
            "recall:  0.9154929577464789\n",
            "f1_score:  0.8708238499425244\n",
            "Naive Bayes;\n",
            "accuracy:  0.8017366136034733\n",
            "precision:  0.7868421052631579\n",
            "recall:  0.8422535211267606\n",
            "f1_score:  0.8012780035349494\n",
            "Decision Tree;\n",
            "accuracy:  0.8364688856729378\n",
            "precision:  0.9230769230769231\n",
            "recall:  0.7436619718309859\n",
            "f1_score:  0.8352810858568855\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Conclusion "
      ],
      "metadata": {
        "id": "70vPpm5BYGHN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "So in this Project of Predicting the Wine Testing, I used varrious evaluation metrics like, accuracy, precison , recall and F1 score. The model that I used were Logistic Regression, Support vector classifier,Naive bayes and Decision tree.\n",
        "After evaluating the model I can see that the KNN permormed the best amonng all the other models with an accuracu score and precison score. Except the KNN the other models performed as well but the score was less than KNN. Hence, the I am going to use the KNN model to the predict the quality of the wine."
      ],
      "metadata": {
        "id": "FAeE13C2YMs4"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}